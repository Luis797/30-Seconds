[{"title":"Accessing Enums in template","author":"fetis","level":"beginner","tags":["enums","templates"],"slug":"accessing-enums-in-template","content":"Enums are great but they are not visible in Angular templates by default. \nWith this little trick you can make them accessible.\n\n```typescript\nenum Animals {\n  DOG,\n  CAT,\n  DOLPHIN\n}\n\n@Component({\n  ...\n})\nexport class AppComponent {\n  animalsEnum: typeof Animals = Animals;\n}\n```","componentcode":"```typescript\nimport { Component } from \"@angular/core\";\n\nenum Animals {\n  DOG,\n  CAT,\n  DOLPHIN\n}\n\n@Component({\n  selector: \"my-app\",\n  template: `<div *ngIf=\"value === animalsEnum.CAT\">meow</div>`,\n})\nexport class AppComponent {\n  value: Animals = Animals.CAT;\n  animalsEnum: typeof Animals = Animals;\n}\n```"},{"title":"Adding keyboard shortcuts to elements","author":"kirjs","level":"intermediate","tags":["tips","good-to-know"],"slug":"adding-keyboard-shortcuts-to-elements","content":"It's really easy to add keyboard shortcuts in the template: \n```html\n<textarea (keydown.ctrl.enter)=\"doSomething()\"></textarea>\n```","bonus":"```html\n<input (keydown.enter)=\"...\">\n<input (keydown.a)=\"...\">\n<input (keydown.esc)=\"...\">\n<input (keydown.shift.esc)=\"...\">\n<input (keydown.control)=\"...\">\n<input (keydown.alt)=\"...\">\n<input (keydown.meta)=\"...\">\n<input (keydown.9)=\"...\">\n<input (keydown.tab)=\"...\">\n<input (keydown.backspace)=\"...\">\n<input (keydown.arrowup)=\"...\">\n<input (keydown.shift.arrowdown)=\"...\">\n<input (keydown.shift.control.z)=\"...\">\n<input (keydown.f4)=\"...\">\n```","links":"https://alligator.io/angular/binding-keyup-keydown-events","componentcode":"```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <h2>Type something in the input and hit control+enter to \n        update the value below:</h2>\n\n    <h1>{{value || 'no value'}}</h1>\n    <input (keydown.control.enter)=\"value=$event.target.value; $event.target.value = ''\">\n  `\n})\nexport class AppComponent {\n    value: string;\n}\n```"},{"title":"Bind to host properties with host binding","author":"kirjs","level":"intermediate","tags":["components"],"slug":"bind-to-host-properties-with-host-binding","content":"Every rendered angular component is wrapped in a host element (which is the same as component's selector).\n\nIt is possible to bind properties and attributes of host element using @HostBinding decorators, e.g. \n\n```typescript\nimport { Component, HostBinding } from '@angular/core';\n\n@Component({\n   selector: 'my-app', \n   template: `\n  <div>Use the input below  to select host background-color:</div>\n  <input type=\"color\" [(ngModel)]=\"color\"> \n`,\n  styles:[`:host { display: block; height: 100px; }`]\n  },\n  \n)\nexport class AppComponent {\n  @HostBinding('style.background') color = '#ff9900';\n}\n```","componentcode":"```typescript\n  import { Component, HostBinding } from '@angular/core';\n\n@Component({\n   selector: 'my-app', \n   template: `\n  <div>Use the input below  to select host background-color:</div>\n  <input type=\"color\" [(ngModel)]=\"color\"> \n`,\n  styles:[`:host { display: block; height: 100px; }`]\n  },\n  \n)\nexport class AppComponent {\n  @HostBinding('style.background') color = '#ff9900';\n}\n```","modulecode":"```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [BrowserModule, FormsModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"Default ViewEncapsulation value","author":"kirjs","level":"beginner","tags":["configuration","styling"],"slug":"default-viewencapsulation-value","content":"If you're using `ViewEncapsulation` value which is different than default, it might be daunting to set the value manually for every component. \n\nLuckily you can configure it globally when bootstrapping your app:\n\n```TypeScript\nplatformBrowserDynamic().bootstrapModule(AppModule, [\n    {\n        // NOTE: Use ViewEncapsulation.None only if you know what you're doing.\n        defaultEncapsulation: ViewEncapsulation.None\n    }\n]);\n```","componentcode":"```typescript\n  \nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `<h1>I am red </h1>`,\n  styles: [` body {background: red}; `]\n})\nexport class AppComponent {}","maincode":"import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\nimport {ViewEncapsulation} from '@angular/core'\n\nplatformBrowserDynamic().bootstrapModule(AppModule, [\n    {\n        defaultEncapsulation: ViewEncapsulation.None\n    }\n]);\n```"},{"title":"Global event listeners","author":"kirjs","level":"intermediate","tags":["events","components"],"slug":"global-event-listeners","content":"It is possible to add global event listeners in your Components/Directives with `HostListener`. Angular will take care of unsubscribing once your directive is destroyed.\n\n```typescript\n@Directive({\n  selector: '[rightClicker]'\n})\nexport class ShortcutsDirective {\n  @HostListener('window:keydown.ArrowRight')\n  doImportantThings() {\n    console.log('You pressed right');\n  }\n```","bonus":"You can have multiple bindings:\n\n```typescript\n  @HostListener('window:keydown.ArrowRight')\n  @HostListener('window:keydown.PageDown')\n  next() {\n    console.log('Next')\n  }\n```\n\nYou can also pass params:\n\n```typescript\n  @HostListener('window:keydown.ArrowRight', '$event.target')\n  next(target) {\n    console.log('Pressed right on this element: ' target)\n  }\n```","componentcode":"```typescript\nimport { Component, HostListener } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n  <h2>Try using your keyboard.</h2>\n  <h1>Last pressed: {{lastPressed}} </h1>`\n})\nexport class AppComponent {\n  lastPressed = 'nothing';\n  @HostListener('window:keydown.ArrowRight', ['$event.key'])\n  next(key: string) {\n    this.lastPressed = key;\n  }\n}\n```"},{"title":"Injecting document","author":"kirjs","level":"intermediate","tags":["dependency injection"],"slug":"injecting-document","content":"Sometimes you need to get access to global `document`. \n\nTo simplify unit-testing, Angular provides it through dependency injection:\n\n```typescript\nimport { DOCUMENT } from '@angular/common';\nimport { Inject } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `<h1>Edit me </h1>`\n})\nexport class AppComponent {\n    constructor(@Inject(DOCUMENT) private document: Document) {\n        // Word with document.location, or other things here....\n    }\n}\n````","links":"https://angular.io/api/common/DOCUMENT","componentcode":"```typescript\n  \nimport { Component } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Inject } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `<h1>Edit me </h1>`\n})\nexport class AppComponent {\n    constructor(@Inject(DOCUMENT) private document: Document) {\n      // Don't do this in prod!\n      document.body.style.backgroundColor = 'pink';\n    }\n}\n```"},{"title":"Style bindings","level":"intermediate","author":"Jamaks","tags":["styles"],"slug":"style-bindings","content":"You can use advanced property bindings to set specific style values based on component property values: \n\n```html\n<p [style.background-color]=\"'green'\">\n  I am in green background\n</p>\n\n<p [style.font-size.px]=\"isImportant ? '30' : '16'\">\n  May be important text.\n</p>\n\n```","bonus":"```html\n<!-- Width in pixels -->\n<div [style.width.px]=\"pxWidth\"></div>\n\n<!-- Font size in percentage relative to the parent -->\n<div [style.font-size.%]=\"percentageSize\">...</div>\n\n<!-- Height relative to the viewport height -->\n<div [style.height.vh]=\"vwHeight\"></div>\n```","componentcode":"```typescript \nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n  <div>Use the input below to select host background-color:</div>\n<input type=\"color\" [(ngModel)]=\"color\">\n<input type=\"number\" [(ngModel)]=\"width\">\n<div [style.width.px]=\"width\" [style.background]=\"color\">\n    Change me!\n</div> \n`\n})\nexport class AppComponent {\n  color = '#ff9900';\n  width = 200;\n}\n```","modulecode":"```typescript  \nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [BrowserModule, FormsModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"trackBy in for loops","author":"maktarsis","level":"beginner","tags":["good-to-know","tips","components","performance"],"slug":"trackby-in-for-loops","content":"To avoid the expensive operations, we can help Angular to track which items added or removed i.e. customize the default tracking algorithm by providing a trackBy option to NgForOf.\n\nSo you can provide your custom trackBy function that will return unique identifier for each iterated item. \nFor example, some key value of the item. If this key value matches the previous one, then Angular won't detect changes.\n\n**trackBy** takes a function that has _index_ and _item_ args. \n\n```typescript\n@Component({\n  selector: 'my-app',\n  template: `<ul>\n      <li *ngFor=\"let item of items; trackBy: trackByFn\">{{item.id}}</li>\n    </ul>`,\n})\nexport class AppComponent { \n  trackByFn(index, item) {\n    return item.id;\n  }\n}\n```\nIf trackBy is given, Angular tracks changes by the return value of the function. \n\nNow when you change the collection, Angular can track which items have been added or removed according to the unique identifier and create/destroy only changed items.","links":"https://angular.io/api/common/NgForOf\nhttps://angular.io/api/core/TrackByFunction","componentcode":"```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <ul>\n      <li *ngFor=\"let item of items; trackBy: trackByFn\">{{item.id}}</li>\n    </ul>\n  `\n})\nexport class AppComponent {\n items = [\n   {id: 1},\n   {id: 2},\n   {id: 3}\n ];\n\n  trackByFn(index, item) {\n    return item.id;\n  } \n}\n\n```"},{"title":"Window Location injection","author":"fetis","level":"intermediate","tags":["dependency-injection","testing"],"slug":"window-location-injection","content":"For testing purposes you might want to inject `window.location` object in your component.\nYou can achieve this with custom `InjectionToken` mechanism provided by Angular.\n\n```typescript\nexport const LOCATION_TOKEN = new InjectionToken<Location>('Window location object');\n\n@NgModule({\n  providers: [\n    { provide: LOCATION_TOKEN, useValue: window.location }\n  ]\n})\nexport class SharedModule {}\n\n//...\n\n@Component({\n})\nexport class AppComponent {\n  constructor(\n    @Inject(LOCATION_TOKEN) public location: Location\n  ) {}\n}\n```","links":"https://itnext.io/testing-browser-window-location-in-angular-application-e4e8388508ff\nhttps://angular.io/guide/dependency-injection","componentcode":"```typescript\nimport { Component, Inject } from '@angular/core';\nimport { LOCATION_TOKEN } from './app.module';\n\n@Component({\n  selector: 'my-app',\n  template: `{{ location.href }}`\n})\nexport class AppComponent {\n  constructor(\n    @Inject(LOCATION_TOKEN) public location: Location\n  ) {}\n\n  useIt() {\n    this.location.assign('xxx');\n  }\n}\n```","modulecode":"```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, InjectionToken } from '@angular/core';\nimport { AppComponent } from './app.component';\n\nexport const LOCATION_TOKEN = new InjectionToken<Location>('Window location object');\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  providers: [\n    { provide: LOCATION_TOKEN, useValue: window.location }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"}]