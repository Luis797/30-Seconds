[{"title":"Accessing all nested form controls","author":"thekiba","level":"intermediate","tags":["reactive forms","tips","good to know"],"slug":"accessing-all-nested-form-controls","content":"Sometimes we need to work with every single Control is a form. Here's how it can be done: \n\n```typescript\nfunction flattenControls(form: AbstractControl): AbstractControl[] {\n  let extracted: AbstractControl[] = [ form ];\n  if (form instanceof FormArray || form instanceof FormGroup) {\n    const children = Object.values(form.controls).map(flattenControls);\n    extracted = extracted.concat(...children);\n  }\n  return extracted;\n}\n```\n\nFor examples use:\n```typescript\n// returns all dirty abstract controls\nextractControls(form).filter((control) => control.dirty);\n\n// mark all controls as touched\nextractControls(form).forEach((control) => control.markAsTouched({ onlySelf: true }));\n```","links":"https://angular.io/guide/reactive-forms","componentcode":"```typescript\nimport { Component } from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup, FormArray, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <p>Count of dirty controls: {{ dirtyControls.length }}</p>\n    <button (click)=\"markAsDirty(form)\">Mark as dirty</button>\n  `\n})\nexport class AppComponent {\n\n  form: AbstractControl;\n\n  get dirtyControls(): AbstractControl[] {\n    return extractControls(this.form).filter(control => control.dirty);\n  }\n\n  constructor(private fb: FormBuilder) {\n    this.form = fb.group({\n      a: fb.control(''),\n      b: fb.array([\n        fb.control(''),\n        fb.group({}),\n        fb.array([])\n      ])\n    });\n  }\n\n  markAsDirty(form: AbstractControl): void {\n    for (const control of extractControls(this.form)) {\n      control.markAsDirty({ onlySelf: true });\n    }\n  }\n}\n\nfunction extractControls(form: AbstractControl): AbstractControl[] {\n  let extracted: AbstractControl[] = [ form ];\n  if (form instanceof FormArray || form instanceof FormGroup) {\n    const children = Object.values(form.controls).map(extractControls);\n    extracted = extracted.concat(...children);\n  }\n  return extracted;\n}\n```","modulecode":"```typescript  \nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n@NgModule({\n  imports: [BrowserModule, FormsModule, ReactiveFormsModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"Accessing Enums in template","author":"fetis","level":"beginner","tags":["enums","templates"],"slug":"accessing-enums-in-template","content":"Enums are great but they are not visible in Angular templates by default. \nWith this little trick you can make them accessible.\n\n```typescript\nenum Animals {\n  DOG,\n  CAT,\n  DOLPHIN\n}\n\n@Component({\n  ...\n})\nexport class AppComponent {\n  animalsEnum: typeof Animals = Animals;\n}\n```","componentcode":"```typescript\nimport { Component } from \"@angular/core\";\n\nenum Animals {\n  DOG,\n  CAT,\n  DOLPHIN\n}\n\n@Component({\n  selector: \"my-app\",\n  template: `<div *ngIf=\"value === animalsEnum.CAT\">meow</div>`,\n})\nexport class AppComponent {\n  value: Animals = Animals.CAT;\n  animalsEnum: typeof Animals = Animals;\n}\n```"},{"title":"Adding keyboard shortcuts to elements","author":"kirjs","level":"intermediate","tags":["tips","good-to-know"],"slug":"adding-keyboard-shortcuts-to-elements","content":"It's really easy to add keyboard shortcuts in the template: \n```html\n<textarea (keydown.ctrl.enter)=\"doSomething()\"></textarea>\n```","bonus":"```html\n<input (keydown.enter)=\"...\">\n<input (keydown.a)=\"...\">\n<input (keydown.esc)=\"...\">\n<input (keydown.shift.esc)=\"...\">\n<input (keydown.control)=\"...\">\n<input (keydown.alt)=\"...\">\n<input (keydown.meta)=\"...\">\n<input (keydown.9)=\"...\">\n<input (keydown.tab)=\"...\">\n<input (keydown.backspace)=\"...\">\n<input (keydown.arrowup)=\"...\">\n<input (keydown.shift.arrowdown)=\"...\">\n<input (keydown.shift.control.z)=\"...\">\n<input (keydown.f4)=\"...\">\n```","links":"https://alligator.io/angular/binding-keyup-keydown-events","componentcode":"```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <h2>Type something in the input and hit control+enter to \n        update the value below:</h2>\n\n    <h1>{{value || 'no value'}}</h1>\n    <input (keydown.control.enter)=\"value=$event.target.value; $event.target.value = ''\">\n  `\n})\nexport class AppComponent {\n    value: string;\n}\n```"},{"title":"Bind to host properties with host binding","author":"kirjs","level":"intermediate","tags":["components"],"slug":"bind-to-host-properties-with-host-binding","content":"Every rendered angular component is wrapped in a host element (which is the same as component's selector).\n\nIt is possible to bind properties and attributes of host element using @HostBinding decorators, e.g. \n\n```typescript\nimport { Component, HostBinding } from '@angular/core';\n\n@Component({\n   selector: 'my-app', \n   template: `\n  <div>Use the input below  to select host background-color:</div>\n  <input type=\"color\" [(ngModel)]=\"color\"> \n`,\n  styles:[`:host { display: block; height: 100px; }`]\n  },\n  \n)\nexport class AppComponent {\n  @HostBinding('style.background') color = '#ff9900';\n}\n```","componentcode":"```typescript\n  import { Component, HostBinding } from '@angular/core';\n\n@Component({\n   selector: 'my-app', \n   template: `\n  <div>Use the input below  to select host background-color:</div>\n  <input type=\"color\" [(ngModel)]=\"color\"> \n`,\n  styles:[`:host { display: block; height: 100px; }`]\n  },\n  \n)\nexport class AppComponent {\n  @HostBinding('style.background') color = '#ff9900';\n}\n```","modulecode":"```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [BrowserModule, FormsModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"Component level providers","level":"intermediate","author":"thekiba","tags":["tips","components","dependency-injection"],"slug":"component-level-providers","content":"Generally we get one service instance per the whole application. \nIt is also possible to create an instance of service per component or directive. \n\n```typescript\n@Component({\n  selector: 'provide',\n  template: '<ng-content></ng-content>',\n  providers: [ Service ]\n})\nexport class ProvideComponent {}\n```\n\n```typescript\n@Directive({\n  selector: '[provide]',\n  providers: [ Service ]\n})\nexport class ProvideDirective {}\n```","links":"https://angular.io/guide/hierarchical-dependency-injection#component-level-injectors\n\nhttps://stackblitz.com/edit/angular-cdk-happy-animals","componentcode":"```typescript\nimport { Injectable, Component, OnInit, OnDestroy, Host } from '@angular/core';\n\n@Injectable()\nexport class ItemsLinker implements OnDestroy {\n  private links: Set<ItemComponent> = new Set();\n\n  link(item: ItemComponent) {\n    this.links.add(item);\n  }\n\n  unlink(item: ItemComponent) {\n    this.links.delete(item);\n  }\n\n  ngOnDestroy() {\n    this.links.clear();\n  }\n}\n\n@Component({\n  selector: 'item',\n  template: '<ng-content></ng-content>'\n})\nexport class ItemComponent implements OnInit, OnDestroy {\n\n  constructor(@Host() private linker: ItemsLinker) {}\n\n  ngOnInit() {\n    this.linker.link(this);\n  }\n  ngOnDestroy() {\n    this.linker.unlink(this);\n  }\n}\n\n@Component({\n  selector: 'items',\n  template: '<ng-content></ng-content>',\n  providers: [ ItemsLinker ]\n})\nexport class ItemsComponent {}\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <items>\n      <item>ü¶ä</item>\n      <item>ü¶Ñ</item>\n      <item>üêâ</item>\n    </items>\n  `\n})\nexport class AppComponent {}\n```","modulecode":"```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent, ItemsComponent, ItemComponent } from './app.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [\n    AppComponent,\n    ItemsComponent,\n    ItemComponent\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"Default ViewEncapsulation value","author":"kirjs","level":"beginner","tags":["configuration","styling"],"slug":"default-viewencapsulation-value","content":"If you're using `ViewEncapsulation` value which is different than default, it might be daunting to set the value manually for every component. \n\nLuckily you can configure it globally when bootstrapping your app:\n\n```TypeScript\nplatformBrowserDynamic().bootstrapModule(AppModule, [\n    {\n        // NOTE: Use ViewEncapsulation.None only if you know what you're doing.\n        defaultEncapsulation: ViewEncapsulation.None\n    }\n]);\n```","componentcode":"```typescript\n  \nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `<h1>I am red </h1>`,\n  styles: [` body {background: red}; `]\n})\nexport class AppComponent {}\n```","maincode":"```typescript\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\nimport {ViewEncapsulation} from '@angular/core'\n\nplatformBrowserDynamic().bootstrapModule(AppModule, [\n    {\n        defaultEncapsulation: ViewEncapsulation.None\n    }\n]);\n```"},{"title":"Getting components of different types with ViewChild","level":"advanced","author":"thekiba","tags":["good-to-know","tips","components","dependency-injection"],"slug":"getting-components-of-different-types-with-viewchild","content":"It's possible to use `@ViewChild` (also `@ViewChildren` and `@ContentChild/Children`) to query for components of different types using dependency injection. \n\nIn the example below we can use `@ViewChildren(Base)` to get instances of `Foo` and `Bar`.\n\n```typescript\nabstract class Base {}\n\n@Component({\n  selector: 'foo',\n  providers: [{ provide: Base, useExisting: Foo }]\n})\nclass Foo extends Base {}\n\n@Component({\n  selector: 'bar',\n  providers: [{ provide: Base, useExisting: Bar }]\n})\nclass Bar extends Base {}\n\n// Now we can require both types of components using Base.\n@Component({ template: `<foo></foo><bar></bar>` })\nclass AppComponent {\n  @ViewChildren(Base) components: QueryList<Base>;\n}\n```","links":"https://www.youtube.com/watch?v=PRRgo6F0cjs","componentcode":"```typescript\nimport { Component, ViewChildren, QueryList, AfterViewInit } from '@angular/core';\n\nexport abstract class Animal {\n    abstract say();\n}\n\n@Component({\n  selector: 'fox',\n  template: `ü¶ä`,\n  providers: [{ provide: Animal, useExisting: Fox }]\n})\nexport class Fox extends Animal {\n    say() {\n        console.log('Joff-tchoff-tchoffo-tchoffo-tchoff!');\n    }\n}\n\n@Component({\n  selector: 'rice',\n  template: `üçö`,\n  providers: [{ provide: Animal, useExisting: Rice }]\n})\nexport class Rice extends Animal {\n    say() {\n        console.log('lol');\n    }\n}\n\n@Component({\n  selector: 'dragon',\n  template: `üêâ`,\n  providers: [{ provide: Animal, useExisting: Dragon }]\n})\nexport class Dragon extends Animal {\n    say() {\n        console.log('Wa-pa-pa-pa-pa-pa-pow!');\n    }\n}\n\n@Component({\n    selector: 'my-app',\n    template: `\n        <fox></fox>\n        <rice></rice>\n        <dragon></dragon>\n    `\n})\nexport class AppComponent implements AfterViewInit {\n    @ViewChildren(Animal) animals: QueryList<Animal>;\n\n    ngAfterViewInit() {\n        animals.forEach((animal) => animal.say());\n    }\n}\n```","modulecode":"```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent, Fox, Rice, Dragon } from './app.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, Fox, Rice, Dragon],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"Global event listeners","author":"kirjs","level":"intermediate","tags":["events","components"],"slug":"global-event-listeners","content":"It is possible to add global event listeners in your Components/Directives with `HostListener`. Angular will take care of unsubscribing once your directive is destroyed.\n\n```typescript\n@Directive({\n  selector: '[rightClicker]'\n})\nexport class ShortcutsDirective {\n  @HostListener('window:keydown.ArrowRight')\n  doImportantThings() {\n    console.log('You pressed right');\n  }\n```","bonus":"You can have multiple bindings:\n\n```typescript\n  @HostListener('window:keydown.ArrowRight')\n  @HostListener('window:keydown.PageDown')\n  next() {\n    console.log('Next')\n  }\n```\n\nYou can also pass params:\n\n```typescript\n  @HostListener('window:keydown.ArrowRight', '$event.target')\n  next(target) {\n    console.log('Pressed right on this element: ' + target)\n  }\n```","componentcode":"```typescript\nimport { Component, HostListener } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n  <h2>Try using your keyboard.</h2>\n  <h1>Last pressed: {{lastPressed}} </h1>`\n})\nexport class AppComponent {\n  lastPressed = 'nothing';\n  @HostListener('window:keydown', ['$event.key'])\n  next(key: string) {\n    this.lastPressed = key;\n  }\n}\n```"},{"title":"Injecting document","author":"kirjs","level":"intermediate","tags":["dependency injection"],"slug":"injecting-document","content":"Sometimes you need to get access to global `document`. \n\nTo simplify unit-testing, Angular provides it through dependency injection:\n\n```typescript\nimport { DOCUMENT } from '@angular/common';\nimport { Inject } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `<h1>Edit me </h1>`\n})\nexport class AppComponent {\n    constructor(@Inject(DOCUMENT) private document: Document) {\n        // Word with document.location, or other things here....\n    }\n}\n````","links":"https://angular.io/api/common/DOCUMENT","componentcode":"```typescript\n  \nimport { Component } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Inject } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `<h1>Edit me </h1>`\n})\nexport class AppComponent {\n    constructor(@Inject(DOCUMENT) private document: Document) {\n      // Don't do this in prod!\n      document.body.style.backgroundColor = 'pink';\n    }\n}\n```"},{"title":"Loader Component","level":"beginner","author":"thekiba","tags":["tips","good-to-know","components","templates"],"slug":"loader-component","content":"You can create own helper component and use it instead of `*ngIf`.\n\n```typescript\n@Component({\n  selector: 'loader',\n  template: `\n    <ng-content *ngIf=\"!loading else showLoader\"></ng-content>\n    <ng-template #showLoader>üïö Wait 10 seconds!</ng-template>\n  `\n})\nclass LoaderComponent {\n  @Input() loading: boolean;\n}\n```\n\nFor usage example:\n```html\n<loader [loading]=\"isLoading\">ü¶ä ü¶Ñ üêâ</loader>\n```\n\n> Note that the content will be eagerly evaluated, e.g. in the snippet below `destroy-the-world` will be created before the loading even starts:\n\n```html\n<loader [loading]=\"isLoading\"><destroy-the-world></destroy-the-world></loader>\n```","links":"https://medium.com/claritydesignsystem/ng-content-the-hidden-docs-96a29d70d11b\n\nhttps://blog.angularindepth.com/https-medium-com-thomasburleson-animated-ghosts-bfc045a51fba","componentcode":"```typescript \nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'loader',\n  template: `\n    <ng-content *ngIf=\"!loading else showLoader\"></ng-content>\n    <ng-template #showLoader>üïö Wait 10 seconds!</ng-template>\n  `\n})\nexport class LoaderComponent {\n  @Input() loading: boolean;\n}\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <button (click)=\"isLoading = !isLoading\">\n      Toggle\n    </button>\n    <loader [loading]=\"isLoading\">\n      ü¶ä ü¶Ñ üêâ\n    </loader>\n  `\n})\nexport class AppComponent {\n  isLoading: boolean = true;\n}\n```","modulecode":"```typescript  \nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent, LoaderComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [BrowserModule, FormsModule],\n  declarations: [AppComponent, LoaderComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"ng-content","level":"beginner","author":"thekiba","tags":["good-to-know","tips","components"],"slug":"ng-content","content":"With `ng-content` you can pass any elements to a component. \nThis simplifies creating reusable components.\n\n```typescript\n@Component({\n  selector: 'wrapper',\n  template: `\n    <div class=\"wrapper\">\n      <ng-content></ng-content>\n    </div>\n  `,\n})\nexport class Wrapper {}\n```\n\n```html\n<wrapper>\n  <h1>Hello World!</h1>\n</wrapper>\n```","links":"https://medium.com/p/96a29d70d11b","componentcode":"```typescript\nimport { Component } from '@angular/core';\n\nfunction template(useClass: string): string {\n  return `\n    <div class=\"${useClass}\">\n      <ng-content></ng-content>\n    </div>\n  `;\n}\n\n@Component({\n  selector: 'card',\n  template: template('card')\n})\nexport class Card {}\n\n@Component({\n  selector: 'card-header',\n  template: template('card-header')\n})\nexport class CardHeader {}\n\n@Component({\n  selector: 'card-body',\n  template: template('card-body')\n})\nexport class CardBody {}\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <app-card>\n      <app-card-header>\n        Header\n      </app-card-header>\n      <app-card-body>\n        Body\n      </app-card-body>\n    </app-card>\n  `\n})\nexport class AppComponent {}\n```","modulecode":"```typescript  \nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent, CardBody, CardHeader, Card } from './app.component';\nimport { FormsModule } from '@angular/forms';\n@NgModule({\n  imports: [BrowserModule, FormsModule],\n  declarations: [AppComponent, CardBody, CardHeader, Card],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"ngIf else","author":"fetis","level":"beginner","tags":["ngif","templates"],"slug":"ngif-else","content":"`*ngIf` directive also supports `else` statement.\n\n```html\n<div *ngIf=\"isLoading; else notLoading\">loading...</div>\n\n<ng-template #notLoading>not loading</ng-template>\n```","componentcode":"```typescript\nimport { Component, HostBinding } from '@angular/core';\n\n@Component({\n   selector: 'my-app', \n   template: `\n<div *ngIf=\"isLoading; else notLoading\">loading...</div>\n\n<ng-template #notLoading>not loading</ng-template>\n`,\n  },\n  \n)\nexport class AppComponent {\n  isLoading = false\n}\n```","modulecode":"```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [BrowserModule, FormsModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"Optional parameters in the middle","author":"irustm","level":"beginner","tags":["routing"],"slug":"optional-parameters-in-the-middle","content":"Navigate with matrix params:\n\nthe router will navigate to `/first;name=foo/details`\n```html\n<a [routerLink]=\"['/', 'first', {name: 'foo'}, 'details']\">\n  link with params\n</a>\n```","links":"https://stackblitz.com/edit/angular-xvy5pd","componentcode":"import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <a routerLink=\"/\">home</a> <br/>\n    <a [routerLink]=\"['/', 'first', 'details']\"> link without params </a> <br/>\n    <a [routerLink]=\"['/', 'first', {name: 'foo'}, 'details']\"> link with params </a> <br/>\n    <router-outlet></router-outlet>\n  `,\n  styleUrls: [ './app.component.css' ]\n})\nexport class AppComponent  {\n}\n\n@Component({\n  selector: 'first',\n  template: `\n    first component\n    <router-outlet></router-outlet>\n  `,\n})\nexport class FirstComponent implements OnInit {\n  params: any;\n  constructor(private activatedRoute: ActivatedRoute){}\n  ngOnInit(){\n    this.activatedRoute.params.subscribe(params => {\n      console.log(`FirstComponent:`, params);\n    });\n  }\n}\n@Component({\n  selector: 'details',\n  template: `\n    Details\n  `,\n})\nexport class DetailComponent  {\n  constructor(private activatedRoute: ActivatedRoute){}\n  ngOnInit(){\n    this.activatedRoute.params.subscribe(params => {\n      console.log(`DetailComponent:`, params);\n    });\n  }\n}","modulecode":"import { NgModule } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule, Route } from '@angular/router';\n\nimport { AppComponent, DetailComponent, FirstComponent } from './app.component';\n\nconst ROUTES:  Route[] = [\n  {\n    path: 'first',\n    component: FirstComponent,\n    children: [{\n      path: 'details',\n      component: DetailComponent\n    }\n    ]\n  },\n];\n@NgModule({\n  imports:      [ BrowserModule, FormsModule, RouterModule.forRoot(ROUTES) ],\n  declarations: [ AppComponent, DetailComponent, FirstComponent  ],\n  bootstrap:    [ AppComponent ],\n  providers: [{ provide: APP_BASE_HREF, useValue: '/angular/30-seconds' }]\n})\nexport class AppModule { }"},{"title":"Passing template as an input","author":"fetis","level":"intermediate","tags":["template"],"slug":"passing-template-as-an-input","content":"It's possible to take a template as `@Input` for a component to customize the render\n\n\n```typescript\n@Component({\n  template: `\n    <nav>\n      <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n    </nav>\n  `,\n})\nexport class SiteMenuComponent  {\n  @Input() template: TemplateRef<any>\n}\n\n...\n\n<site-menu [template]=\"menu1\"></site-menu>\n\n<ng-template #menu1>\n  <div><a href=\"#\">item1</a></div>\n  <div><a href=\"#\">item2</a></div>\n</ng-template>\n```\n> Note: `ng-content` should be used for most of the cases and it's simpler and more declarative.\n> Only use this approach if you need extra flexibility that can't be achieved with ng-content.","links":"https://blog.angular-university.io/angular-ng-template-ng-container-ngtemplateoutlet/","componentcode":"```typescript\nimport { Component, Input, TemplateRef } from '@angular/core';\n\n@Component({\n  selector: 'site-menu',\n  template: `\n    <nav>\n      <ng-container *ngTemplateOutlet=\"template\"></ng-container>\n    </nav>\n  `,\n})\nexport class SiteMenuComponent  {\n  @Input() template: TemplateRef<any>\n}\n\n@Component({\n  selector: 'my-app',\n  template: `\n<site-menu [template]=\"menu1\"></site-menu>\n\n<ng-template #menu1>\n  <div><a href=\"#\">item1</a></div>\n  <div><a href=\"#\">item2</a></div>\n</ng-template>  \n  `\n})\nexport class AppComponent {}\n```","modulecode":"```typescript\n// This section is optional, remove it if the code below is good.\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent, SiteMenuComponent } from './app.component';\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent, SiteMenuComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"Reusing code in template","author":"fetis","level":"intermediate","tags":["templates"],"slug":"reusing-code-in-template","content":"While the best way of reusing your code is creating a component, it's also possible to do it in a template.\n\nTo do this you can use `ng-template` along with `*ngTemplateOutlet` directive.\n\n```html\n  <p>\n    <ng-container *ngTemplateOutlet=\"fancyGreeting\"></ng-container>\n  </p>\n\n  <button>\n    <ng-container *ngTemplateOutlet=\"fancyGreeting\"></ng-container>    \n  </button>\n  \n  <ng-template #fancyGreeting>\n    Hello <b>{{name}}!</b>\n  </ng-template>\n```","links":"https://angular.io/api/common/NgTemplateOutlet\nhttps://angular.io/guide/structural-directives#the-ng-template","componentcode":"```typescript\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n  <p>\n    <ng-container *ngTemplateOutlet=\"fancyGreeting\"></ng-container>\n  </p>\n\n  <button>\n    <ng-container *ngTemplateOutlet=\"fancyGreeting\"></ng-container>    \n  </button>\n  \n  <ng-template #fancyGreeting>\n    Hello <b>{{name}}!</b>\n  </ng-template>\n  `,\n})\nexport class AppComponent  {\n  name = 'Angular';\n}\n```"},{"title":"Style bindings","level":"intermediate","author":"Jamaks","tags":["styles"],"slug":"style-bindings","content":"You can use advanced property bindings to set specific style values based on component property values: \n\n```html\n<p [style.background-color]=\"'green'\">\n  I am in green background\n</p>\n\n<p [style.font-size.px]=\"isImportant ? '30' : '16'\">\n  May be important text.\n</p>\n\n```","bonus":"```html\n<!-- Width in pixels -->\n<div [style.width.px]=\"pxWidth\"></div>\n\n<!-- Font size in percentage relative to the parent -->\n<div [style.font-size.%]=\"percentageSize\">...</div>\n\n<!-- Height relative to the viewport height -->\n<div [style.height.vh]=\"vwHeight\"></div>\n```","componentcode":"```typescript \nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n  <div>Use the input below to select host background-color:</div>\n<input type=\"color\" [(ngModel)]=\"color\">\n<input type=\"number\" [(ngModel)]=\"width\">\n<div [style.width.px]=\"width\" [style.background]=\"color\">\n    Change me!\n</div> \n`\n})\nexport class AppComponent {\n  color = '#ff9900';\n  width = 200;\n}\n```","modulecode":"```typescript  \nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [BrowserModule, FormsModule],\n  declarations: [AppComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"},{"title":"trackBy in for loops","author":"maktarsis","level":"beginner","tags":["good-to-know","tips","components","performance"],"slug":"trackby-in-for-loops","content":"To avoid the expensive operations, we can help Angular to track which items added or removed i.e. customize the default tracking algorithm by providing a trackBy option to NgForOf.\n\nSo you can provide your custom trackBy function that will return unique identifier for each iterated item. \nFor example, some key value of the item. If this key value matches the previous one, then Angular won't detect changes.\n\n**trackBy** takes a function that has _index_ and _item_ args. \n\n```typescript\n@Component({\n  selector: 'my-app',\n  template: `<ul>\n      <li *ngFor=\"let item of items; trackBy: trackByFn\">{{item.id}}</li>\n    </ul>`,\n})\nexport class AppComponent { \n  trackByFn(index, item) {\n    return item.id;\n  }\n}\n```\nIf trackBy is given, Angular tracks changes by the return value of the function. \n\nNow when you change the collection, Angular can track which items have been added or removed according to the unique identifier and create/destroy only changed items.","links":"https://angular.io/api/common/NgForOf\nhttps://angular.io/api/core/TrackByFunction","componentcode":"```typescript\nimport { Component } from '@angular/core';\n\ninterface Item {\n    id: string;\n}\n\n@Component({\n  selector: 'my-app',\n  template: `\n    <ul>\n      <li *ngFor=\"let item of items; trackBy: trackByFn\">{{item.id}}</li>\n    </ul>\n  `\n})\nexport class AppComponent {\n items = [\n   {id: 1},\n   {id: 2},\n   {id: 3}\n ];\n\n  trackByFn(index: number, item: Item) {\n    return item.id;\n  } \n}\n\n```"},{"title":"Window Location injection","author":"fetis","level":"intermediate","tags":["dependency-injection","testing"],"slug":"window-location-injection","content":"For testing purposes you might want to inject `window.location` object in your component.\nYou can achieve this with custom `InjectionToken` mechanism provided by Angular.\n\n```typescript\nexport const LOCATION_TOKEN = new InjectionToken<Location>('Window location object');\n\n@NgModule({\n  providers: [\n    { provide: LOCATION_TOKEN, useValue: window.location }\n  ]\n})\nexport class SharedModule {}\n\n//...\n\n@Component({\n})\nexport class AppComponent {\n  constructor(\n    @Inject(LOCATION_TOKEN) public location: Location\n  ) {}\n}\n```","links":"https://itnext.io/testing-browser-window-location-in-angular-application-e4e8388508ff\nhttps://angular.io/guide/dependency-injection","componentcode":"```typescript\nimport { Component, Inject } from '@angular/core';\nimport { LOCATION_TOKEN } from './app.module';\n\n@Component({\n  selector: 'my-app',\n  template: `{{ location.href }}`\n})\nexport class AppComponent {\n  constructor(\n    @Inject(LOCATION_TOKEN) public location: Location\n  ) {}\n\n  useIt() {\n    this.location.assign('xxx');\n  }\n}\n```","modulecode":"```typescript\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, InjectionToken } from '@angular/core';\nimport { AppComponent } from './app.component';\n\nexport const LOCATION_TOKEN = new InjectionToken<Location>('Window location object');\n\n@NgModule({\n  imports: [BrowserModule],\n  declarations: [AppComponent],\n  providers: [\n    { provide: LOCATION_TOKEN, useValue: window.location }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n```"}]